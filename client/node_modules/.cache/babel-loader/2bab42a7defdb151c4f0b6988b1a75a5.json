{"ast":null,"code":"var _jsxFileName = \"/home/pedromn35/Desktop/Back-end landscape/ninja-graphql/client/src/components/Addbook.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\n/* IMPORT OUR GQL */\n\nimport { useQuery } from '@apollo/client';\n/* IMPORT THE QUERY */\n\nimport { getAuthorsQuery } from '../queries/queries';\n/* THE HOOK */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Addbook = () => {\n  _s();\n\n  /* FORM GET */\n  const [_formstate, _setForm] = useState(null);\n  /* SUBMIT FUNCTION */\n\n  const submit = e => {\n    /* PREVENT THE REFRESH */\n    e.preventDefault();\n    /* DESTRUCT THE OBJECT */\n\n    var name = _formstate.name;\n    var genre = _formstate.genre;\n    var authorId = _formstate.authorId;\n\n    if (name === 'undefined' || genre === 'undefined' || authorId === 'undefined' || name === '' || genre === '' || authorId === '' || _formstate === null) {\n      alert('You need to fill in the fields');\n    }\n  };\n  /* MAKE THE QUERY AND DESTRUCT IT */\n\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getAuthorsQuery);\n  /* IF IT IS LOADING */\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 21\n  }, this);\n  /* IF IT TROHWS AN ERROR */\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 19\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"add-book\",\n      onSubmit: submit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Book name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => {\n            _setForm({ ..._formstate,\n              name: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Genre:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: e => _setForm({ ..._formstate,\n            genre: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Author:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => _setForm({ ..._formstate,\n            authorId: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Select the author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this),\n          /* MAPPING THE DATA TO GET THE NAME OF THE AUTHORS */\n          data.authors.map(_ref => {\n            let {\n              name,\n              id\n            } = _ref;\n\n            /* RETURN THE OPTIONS */\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: id,\n              children: name\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 20\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 1\n  }, this);\n};\n/* EXPORT IT */\n\n\n_s(Addbook, \"9riLJp06xXsxgMFqynuCdGI+YyA=\", false, function () {\n  return [useQuery];\n});\n\n_c = Addbook;\nexport default Addbook;\n\nvar _c;\n\n$RefreshReg$(_c, \"Addbook\");","map":{"version":3,"names":["React","Component","useEffect","useState","useQuery","getAuthorsQuery","Addbook","_formstate","_setForm","submit","e","preventDefault","name","genre","authorId","alert","loading","error","data","target","value","authors","map","id"],"sources":["/home/pedromn35/Desktop/Back-end landscape/ninja-graphql/client/src/components/Addbook.js"],"sourcesContent":["import React, { Component, useEffect, useState } from 'react'\n\n/* IMPORT OUR GQL */\nimport {useQuery} from '@apollo/client';\n/* IMPORT THE QUERY */\nimport {getAuthorsQuery} from '../queries/queries';\n/* THE HOOK */\nconst Addbook = () =>{\n/* FORM GET */\nconst[_formstate,_setForm]=useState(null);\n/* SUBMIT FUNCTION */\nconst submit = (e) =>{\n/* PREVENT THE REFRESH */\ne.preventDefault();\n/* DESTRUCT THE OBJECT */\nvar name = _formstate.name;\nvar genre = _formstate.genre;\nvar authorId = _formstate.authorId;\nif(name==='undefined'||\ngenre==='undefined'||\nauthorId==='undefined'||\nname===''||\ngenre===''||\nauthorId===''||\n_formstate===null){\nalert('You need to fill in the fields')\n}\n\n\n}\n\n\n\n\n/* MAKE THE QUERY AND DESTRUCT IT */\nconst { loading, error, data } = useQuery(getAuthorsQuery);\n/* IF IT IS LOADING */\nif (loading) return <p>Loading...</p>;\n/* IF IT TROHWS AN ERROR */\nif (error) return <p>Error :</p>;\nreturn (\n<div>\n{/* FORM ADD BOOK */}\n<form id=\"add-book\" onSubmit={submit}>\n        {/* div 1 */}\n        <div className=\"field\">\n        {/* label */}\n          <label>Book name:</label>\n          {/* INPUT BOX */}\n          <input type=\"text\"  onChange={(e)=>{_setForm({..._formstate,name: e.target.value})}}/>\n        </div>\n        {/* div 2 */}\n        <div className=\"field\">\n          {/* label */}\n          <label>Genre:</label>\n          {/* INPUT BOX */}\n          <input type=\"text\" onChange={(e)=>_setForm({..._formstate,genre: e.target.value})}/>\n        </div>\n        {/* div 3 */}\n        <div className=\"field\">\n          {/* label */}\n          <label>Author:</label>\n          <select onChange={(e)=>_setForm({..._formstate,authorId: e.target.value})}>\n            {/* MAPPING OF OPTIONS */}\n            <option>Select the author</option>\n            {\n            /* MAPPING THE DATA TO GET THE NAME OF THE AUTHORS */\n            \n            data.authors.map(({name,id})=>{\n            /* RETURN THE OPTIONS */\n            return <option key={id} value={id}>{name}</option>\n            })\n            }\n          </select>\n        </div>\n\n        <button>+</button>\n\n      </form>\n</div>\n)\n\n}\n\n\n/* EXPORT IT */\nexport default Addbook;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AAEA;;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA;;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA;;;;AACA,MAAMC,OAAO,GAAG,MAAK;EAAA;;EACrB;EACA,MAAK,CAACC,UAAD,EAAYC,QAAZ,IAAsBL,QAAQ,CAAC,IAAD,CAAnC;EACA;;EACA,MAAMM,MAAM,GAAIC,CAAD,IAAM;IACrB;IACAA,CAAC,CAACC,cAAF;IACA;;IACA,IAAIC,IAAI,GAAGL,UAAU,CAACK,IAAtB;IACA,IAAIC,KAAK,GAAGN,UAAU,CAACM,KAAvB;IACA,IAAIC,QAAQ,GAAGP,UAAU,CAACO,QAA1B;;IACA,IAAGF,IAAI,KAAG,WAAP,IACHC,KAAK,KAAG,WADL,IAEHC,QAAQ,KAAG,WAFR,IAGHF,IAAI,KAAG,EAHJ,IAIHC,KAAK,KAAG,EAJL,IAKHC,QAAQ,KAAG,EALR,IAMHP,UAAU,KAAG,IANb,EAMkB;MAClBQ,KAAK,CAAC,gCAAD,CAAL;IACC;EAGA,CAlBD;EAuBA;;;EACA,MAAM;IAAEC,OAAF;IAAWC,KAAX;IAAkBC;EAAlB,IAA2Bd,QAAQ,CAACC,eAAD,CAAzC;EACA;;EACA,IAAIW,OAAJ,EAAa,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EACb;;EACA,IAAIC,KAAJ,EAAW,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;EACX,oBACA;IAAA,uBAEA;MAAM,EAAE,EAAC,UAAT;MAAoB,QAAQ,EAAER,MAA9B;MAAA,wBAEQ;QAAK,SAAS,EAAC,OAAf;QAAA,wBAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAIE;UAAO,IAAI,EAAC,MAAZ;UAAoB,QAAQ,EAAGC,CAAD,IAAK;YAACF,QAAQ,CAAC,EAAC,GAAGD,UAAJ;cAAeK,IAAI,EAAEF,CAAC,CAACS,MAAF,CAASC;YAA9B,CAAD,CAAR;UAA+C;QAAnF;UAAA;UAAA;UAAA;QAAA,QAJF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFR,eASQ;QAAK,SAAS,EAAC,OAAf;QAAA,wBAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAIE;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAGV,CAAD,IAAKF,QAAQ,CAAC,EAAC,GAAGD,UAAJ;YAAeM,KAAK,EAAEH,CAAC,CAACS,MAAF,CAASC;UAA/B,CAAD;QAA1C;UAAA;UAAA;UAAA;QAAA,QAJF;MAAA;QAAA;QAAA;QAAA;MAAA,QATR,eAgBQ;QAAK,SAAS,EAAC,OAAf;QAAA,wBAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UAAQ,QAAQ,EAAGV,CAAD,IAAKF,QAAQ,CAAC,EAAC,GAAGD,UAAJ;YAAeO,QAAQ,EAAEJ,CAAC,CAACS,MAAF,CAASC;UAAlC,CAAD,CAA/B;UAAA,wBAEE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAFF;UAIE;UAEAF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiB,QAAa;YAAA,IAAZ;cAACV,IAAD;cAAMW;YAAN,CAAY;;YAC9B;YACA,oBAAO;cAAiB,KAAK,EAAEA,EAAxB;cAAA,UAA6BX;YAA7B,GAAaW,EAAb;cAAA;cAAA;cAAA;YAAA,QAAP;UACC,CAHD,CANF;QAAA;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QAhBR,eAiCQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjCR;IAAA;MAAA;MAAA;MAAA;IAAA;EAFA;IAAA;IAAA;IAAA;EAAA,QADA;AA0CC,CA3ED;AA8EA;;;GA9EMjB,O;UA4B2BF,Q;;;KA5B3BE,O;AA+EN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}